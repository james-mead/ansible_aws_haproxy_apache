---
#Provision some instances:
- name: Provision instances in AWS
  hosts: localhost
  connection: local
  gather_facts: False

# load AWS variables from group_vars file
  vars_files:
  - ../../inventories/development/group_vars/all

  tasks:
  - name: Create Load Balancer Security Group
    ec2_group:
      name: "{{ ec2_environment }}_load_balancers"
      description: "Load Balancer Security Group - {{ ec2_environment }}"
      region: "{{ ec2_region }}"
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Launch load balancing instance
    ec2:
     access_key: "{{ ec2_access_key }}"
     secret_key: "{{ ec2_secret_key }}"
     keypair: "{{ ec2_keypair }}"
     group: ['default', '{{ ec2_environment }}_load_balancers']
     type: "{{ ec2_instance_type }}"
     image: "{{ ec2_image }}"
     region: "{{ ec2_region }}"
     instance_tags: "{'Name':'dev-loadbalancer', 'env':'{{ ec2_environment }}', 'class':'loadbalancer'}"
     count: "1"
     wait: true
    register: ec2

  - name: Create Web Server Security Group
    ec2_group:
      name: "{{ ec2_environment }}_web_servers"
      description: "Web Servers Security Group - {{ ec2_environment }}"
      region: "{{ ec2_region }}"
      access_key: "{{ ec2_access_key }}"
      secret_key: "{{ ec2_secret_key }}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          group_name: "{{ ec2_environment }}_load_balancers"
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          group_name: "{{ ec2_environment }}_load_balancers"
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Launch webserver instances
    ec2:
     access_key: "{{ ec2_access_key }}"
     secret_key: "{{ ec2_secret_key }}"
     keypair: "{{ ec2_keypair }}"
     group: ['default', '{{ ec2_environment }}_web_servers']
     type: "{{ ec2_instance_type }}"
     image: "{{ ec2_image }}"
     region: "{{ ec2_region }}"
     instance_tags: "{'Name':'dev-webserver', 'env':'{{ ec2_environment }}', 'class':'webserver'}"
     count: 2
    register: ec2

  - name: Add new instances to host group
    add_host:
      name: "{{ item.public_ip }}"
      groups: launched
    with_items: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    wait_for: 
      host: "{{ item.public_dns_name }}"
      port: "{{ ec2_ssh_port }}"
      delay: 60 
      timeout: 320 
      state: started
    with_items: "{{ ec2.instances }}"